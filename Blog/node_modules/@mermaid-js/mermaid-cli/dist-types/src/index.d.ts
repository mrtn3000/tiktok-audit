/**
 * Options to pass to {@link parseMMD }
 */
export type ParseMDDOptions = {
    /**
     * - Puppeteer viewport (e.g. `width`, `height`, `deviceScaleFactor`)
     */
    viewport?: puppeteer.Viewport | undefined;
    /**
     * - Background color.
     */
    backgroundColor?: string | undefined;
    /**
     * - Mermaid config.
     */
    mermaidConfig?: import("mermaid").MermaidConfig | undefined;
    /**
     * - Optional CSS text.
     */
    myCSS?: string | undefined;
    /**
     * - If set, scale PDF to fit chart.
     */
    pdfFit?: boolean | undefined;
};
/**
 * Markdown image properties
 * Used to create an markdown image that looks like `![alt](url "title")`
 */
export type MarkdownImageProps = {
    /**
     * - Path to image.
     */
    url: string;
    /**
     * - Image alt text, required.
     */
    alt: string;
    /**
     * - Optional image title text.
     */
    title?: string | null | undefined;
};
/**
 * Renders a mermaid diagram or mermaid markdown file.
 *
 * @param {`${string}.${"md" | "markdown"}` | string | undefined} input - If this ends with `.md`/`.markdown`,
 * path to a markdown file containing mermaid.
 * If this is a string, loads the mermaid definition from the given file.
 * If this is `undefined`, loads the mermaid definition from stdin.
 * @param {`${string}.${"md" | "markdown" | "svg" | "png" | "pdf"}`} output - Path to the output file.
 * @param {Object} [opts] - Options
 * @param {import("puppeteer").LaunchOptions} [opts.puppeteerConfig] - Puppeteer launch options.
 * @param {boolean} [opts.quiet] - If set, suppress log output.
 * @param {"svg" | "png" | "pdf"} [opts.outputFormat] - Mermaid output format.
 * Defaults to `output` extension. Overrides `output` extension if set.
 * @param {ParseMDDOptions} [opts.parseMMDOptions] - Options to pass to {@link parseMMDOptions}.
 */
export function run(input: `${string}.${"md" | "markdown"}` | string | undefined, output: `${string}.${"md" | "markdown" | "svg" | "png" | "pdf"}`, { puppeteerConfig, quiet, outputFormat, parseMMDOptions }?: {
    puppeteerConfig?: puppeteer.LaunchOptions | undefined;
    quiet?: boolean | undefined;
    outputFormat?: "svg" | "png" | "pdf" | undefined;
    parseMMDOptions?: ParseMDDOptions | undefined;
} | undefined): Promise<void>;
/**
 * Render a mermaid diagram.
 *
 * @param {import("puppeteer").Browser} browser - Puppeteer Browser
 * @param {string} definition - Mermaid diagram definition
 * @param {"svg" | "png" | "pdf"} outputFormat - Mermaid output format.
 * @param {ParseMDDOptions} [opt] - Options, see {@link ParseMDDOptions} for details.
 * @returns {Promise<{title: string | null, desc: string | null, data: Buffer}>} The output file in bytes,
 * with optional metadata.
 */
export function renderMermaid(browser: import("puppeteer").Browser, definition: string, outputFormat: "svg" | "png" | "pdf", { viewport, backgroundColor, mermaidConfig, myCSS, pdfFit }?: ParseMDDOptions | undefined): Promise<{
    title: string | null;
    desc: string | null;
    data: Buffer;
}>;
/**
 * @typedef {Object} ParseMDDOptions Options to pass to {@link parseMMD}
 * @property {import("puppeteer").Viewport} [viewport] - Puppeteer viewport (e.g. `width`, `height`, `deviceScaleFactor`)
 * @property {string | "transparent"} [backgroundColor] - Background color.
 * @property {Parameters<import("mermaid")["default"]["initialize"]>[0]} [mermaidConfig] - Mermaid config.
 * @property {CSSStyleDeclaration["cssText"]} [myCSS] - Optional CSS text.
 * @property {boolean} [pdfFit] - If set, scale PDF to fit chart.
 */
/**
 * Parse and render a mermaid diagram.
 *
 * @deprecated Prefer {@link renderMermaid}, as it also returns useful metadata.
 *
 * @param {import("puppeteer").Browser} browser - Puppeteer Browser
 * @param {string} definition - Mermaid diagram definition
 * @param {"svg" | "png" | "pdf"} outputFormat - Mermaid output format.
 * @param {ParseMDDOptions} [opt] - Options, see {@link ParseMDDOptions} for details.
 *
 * @returns {Promise<Buffer>} The output file in bytes.
 */
export function parseMMD(browser: import("puppeteer").Browser, definition: string, outputFormat: "svg" | "png" | "pdf", opt?: ParseMDDOptions | undefined): Promise<Buffer>;
export function cli(): Promise<void>;
/**
 * Prints an error to stderr, then closes with exit code 1
 *
 * @param {string} message - The message to print to `stderr`.
 * @returns {never} Quits Node.JS, so never returns.
 */
export function error(message: string): never;
import puppeteer from 'puppeteer';
//# sourceMappingURL=index.d.ts.map